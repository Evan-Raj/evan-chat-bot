// commands/admin/admin.js

import { logger } from '../../utils/logger.js';
import * as config from '../../utils/config.js';
import loader from '../../utils/loader.js';

export default {
  name: "admin",
  description: "Advanced bot administration commands (Admin only).",
  
  async execute(api, event, args) {
    // Only allow the bot admin to use these commands
    if (event.senderID !== config.adminID) {
      logger.warn(`Non-admin user ${event.senderID} tried to use the admin command.`);
      api.sendMessage("‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶ì‡•§", event.threadID);
      return;
    }

    const subCommand = args[0]?.toLowerCase();

    switch (subCommand) {
      case 'reload':
        try {
          logger.custom("Reloading all commands and events...");
          api.sendMessage("‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", event.threadID);

          await loader.loadModules('commands');
          await loader.loadModules('events');
          
          api.sendMessage("‚úÖ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶¨‡¶Ç ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID);
          logger.info("Commands and events successfully reloaded.");
        } catch (error) {
          logger.error(`Failed to reload modules: ${error.message}`);
          api.sendMessage("‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§", event.threadID);
        }
        break;

      case 'restart':
        logger.custom("Bot is restarting...");
        api.sendMessage("‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", event.threadID, () => {
          process.exit(1);
        });
        break;

      case 'broadcast':
        const messageToBroadcast = args.slice(1).join(" ");
        if (!messageToBroadcast) {
          api.sendMessage("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ø‡¶æ ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§", event.threadID);
          break;
        }

        logger.custom(`Broadcasting message: "${messageToBroadcast}"`);
        api.getThreadList(100, null, ['GROUP'], (err, list) => {
          if (err) {
            logger.error(`Failed to get thread list: ${err.message}`);
            return;
          }
          list.forEach(thread => {
            api.sendMessage(messageToBroadcast, thread.threadID, (err) => {
              if (err) {
                logger.error(`Failed to broadcast to ${thread.threadID}: ${err.message}`);
              }
            });
          });
          api.sendMessage("‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID);
        });
        break;
      
      case 'help':
      default:
        const helpMessage = `
üåê ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶∏‡¶Æ‡ßÇ‡¶π:
!admin reload - ‡¶∏‡¶¨ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ì ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§
!admin restart - ‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡•§
!admin broadcast <message> - ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡•§
        `;
        api.sendMessage(helpMessage.trim(), event.threadID);
        break;
    }
  }
};
